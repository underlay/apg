import * as ns from "../namespace.js";
// The objects constructed here are extremely sensitive.
// Do NOT edit this file unless you absolutely know what you are doing.
const valueOptionCoproductValue = Object.freeze({
    type: "reference",
    value: 1,
});
const valueOptionCoproduct = Object.freeze({
    type: "option",
    key: ns.coproduct,
    value: valueOptionCoproductValue,
});
const valueOptionIriValue = Object.freeze({
    type: "reference",
    value: 2,
});
const valueOptionIri = Object.freeze({
    type: "option",
    key: ns.iri,
    value: valueOptionIriValue,
});
const valueOptionLiteralValue = Object.freeze({
    type: "reference",
    value: 4,
});
const valueOptionLiteral = Object.freeze({
    type: "option",
    key: ns.literal,
    value: valueOptionLiteralValue,
});
const valueOptionProductValue = Object.freeze({
    type: "reference",
    value: 6,
});
const valueOptionProduct = Object.freeze({
    type: "option",
    key: ns.product,
    value: valueOptionProductValue,
});
const valueOptionReferenceValue = Object.freeze({
    type: "reference",
    value: 7,
});
const valueOptionReference = Object.freeze({
    type: "option",
    key: ns.reference,
    value: valueOptionReferenceValue,
});
const valueOptionUnitValue = Object.freeze({
    type: "reference",
    value: 8,
});
const valueOptionUnit = Object.freeze({
    type: "option",
    key: ns.unit,
    value: valueOptionUnitValue,
});
const anyValue = Object.freeze({
    type: "coproduct",
    options: [
        valueOptionCoproduct,
        valueOptionIri,
        valueOptionLiteral,
        valueOptionProduct,
        valueOptionReference,
        valueOptionUnit,
    ],
});
Object.freeze(anyValue.options);
// Component (index 0)
const componentComponentKeyValue = Object.freeze({ type: "iri" });
const componentComponentKey = Object.freeze({
    type: "component",
    key: ns.key,
    value: componentComponentKeyValue,
});
const componentComponentSourceValue = Object.freeze({
    type: "reference",
    value: 6,
});
const componentComponentSource = Object.freeze({
    type: "component",
    key: ns.source,
    value: componentComponentSourceValue,
});
const componentComponentValue = Object.freeze({
    type: "component",
    key: ns.value,
    value: anyValue,
});
const componentValue = Object.freeze({
    type: "product",
    components: [
        componentComponentKey,
        componentComponentSource,
        componentComponentValue,
    ],
});
Object.freeze(componentValue.components);
const componentLabel = Object.freeze({
    type: "label",
    key: ns.component,
    value: componentValue,
});
// Coproduct (index 1)
const coproductValue = Object.freeze({ type: "unit" });
const coproductLabel = Object.freeze({
    type: "label",
    key: ns.coproduct,
    value: coproductValue,
});
// Iri (index 2)
const iriValue = Object.freeze({ type: "unit" });
const iriLabel = Object.freeze({
    type: "label",
    key: ns.iri,
    value: iriValue,
});
// Label (index 3)
const labelComponentKeyValue = Object.freeze({ type: "iri" });
const labelComponentKey = Object.freeze({
    type: "component",
    key: ns.key,
    value: labelComponentKeyValue,
});
const labelComponentValue = Object.freeze({
    type: "component",
    key: ns.value,
    value: anyValue,
});
const labelValue = Object.freeze({
    type: "product",
    components: [labelComponentKey, labelComponentValue],
});
Object.freeze(labelValue.components);
const labelLabel = Object.freeze({
    type: "label",
    key: ns.label,
    value: labelValue,
});
// Literal (index 4)
const literalComponentDatatypeValue = Object.freeze({ type: "iri" });
const literalComponentDatatype = Object.freeze({
    type: "component",
    key: ns.datatype,
    value: literalComponentDatatypeValue,
});
const literalValue = Object.freeze({
    type: "product",
    components: [literalComponentDatatype],
});
Object.freeze(literalValue.components);
const literalLabel = Object.freeze({
    type: "label",
    key: ns.literal,
    value: literalValue,
});
// Option (index 5)
const optionComponentKeyValue = Object.freeze({ type: "iri" });
const optionComponentKey = Object.freeze({
    type: "component",
    key: ns.key,
    value: optionComponentKeyValue,
});
const optionComponentSourceValue = Object.freeze({
    type: "reference",
    value: 1,
});
const optionComponentSource = Object.freeze({
    type: "component",
    key: ns.source,
    value: optionComponentSourceValue,
});
const optionComponentValue = Object.freeze({
    type: "component",
    key: ns.value,
    value: anyValue,
});
const optionValue = Object.freeze({
    type: "product",
    components: [optionComponentKey, optionComponentSource, optionComponentValue],
});
Object.freeze(optionValue.components);
const optionLabel = Object.freeze({
    type: "label",
    key: ns.option,
    value: optionValue,
});
// Product (index 6)
const productValue = Object.freeze({ type: "unit" });
const productLabel = Object.freeze({
    type: "label",
    key: ns.product,
    value: productValue,
});
// Reference (index 7)
const referenceComponentValueValue = Object.freeze({
    type: "reference",
    value: 3,
});
const referenceComponentValue = Object.freeze({
    type: "component",
    key: ns.value,
    value: referenceComponentValueValue,
});
const referenceValue = Object.freeze({
    type: "product",
    components: [referenceComponentValue],
});
Object.freeze(referenceValue.components);
const referenceLabel = Object.freeze({
    type: "label",
    key: ns.reference,
    value: referenceValue,
});
// Unit (index 8)
const unitValue = Object.freeze({ type: "unit" });
const unitLabel = Object.freeze({
    type: "label",
    key: ns.unit,
    value: unitValue,
});
const schemaSchema = [
    componentLabel,
    coproductLabel,
    iriLabel,
    labelLabel,
    literalLabel,
    optionLabel,
    productLabel,
    referenceLabel,
    unitLabel,
];
Object.freeze(schemaSchema);
export default schemaSchema;
//# sourceMappingURL=index.js.map