"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _n = require("n3.ts");

var ns = _interopRequireWildcard(require("../namespace.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// The objects constructed here are extremely sensitive.
// Do NOT edit this file unless you absolutely know what you are doing.
// The six labels in the expression schema are:
// 0. case
// 1. expression
// 2. map
// 3. match
// 4. path
// 5. slot
// 6. tuple
// We have to define them in alphabetical order.
// 0. case
const caseComponentKeyValue = Object.freeze({
  type: "iri"
});
const caseComponentKey = Object.freeze({
  type: "component",
  key: ns.key,
  value: caseComponentKeyValue
});
const caseComponentSourceValue = Object.freeze({
  type: "reference",
  value: 3
});
const caseComponentSource = Object.freeze({
  type: "component",
  key: ns.source,
  value: caseComponentSourceValue
});
const caseComponentValueValue = Object.freeze({
  type: "reference",
  value: 1
});
const caseComponentValue = Object.freeze({
  type: "component",
  key: ns.value,
  value: caseComponentValueValue
});
const caseValue = Object.freeze({
  type: "product",
  components: [caseComponentKey, caseComponentSource, caseComponentValue]
});
Object.freeze(caseValue.components);
const caseLabel = Object.freeze({
  type: "label",
  key: ns.CASE,
  value: caseValue
}); // 1. expression
// What can an expression be?
// We'll it's definitely a linked list, so its tail is null | Expression.
// It's head is one of these:
// 1.0 Constant
// 1.1 Dereference
// 1.2 Identifier
// 1.3 Identity
// 1.4 Initial
// 1.5 Injection
// 1.6 Match
// 1.7 Projection
// 1.8 Terminal
// 1.9 Tuple
// 1.0 constant

const expressionOptionConstantComponents = [{
  type: "component",
  key: ns.datatype,
  value: Object.freeze({
    type: "iri"
  })
}, {
  type: "component",
  key: ns.value,
  value: Object.freeze({
    type: "literal",
    datatype: _n.xsd.string
  })
}];
Object.freeze(expressionOptionConstantComponents);

for (const component of expressionOptionConstantComponents) {
  Object.freeze(component);
}

const expressionOptionConstant = Object.freeze({
  type: "product",
  components: expressionOptionConstantComponents
}); // 1.1 dereference

const expressionOptionDereference = Object.freeze({
  type: "iri"
}); // 1.2 identifier

const expressionOptionIdentifier = Object.freeze({
  type: "iri"
}); // 1.3 identity

const expressionOptionIdentity = Object.freeze({
  type: "unit"
}); // 1.4 initial

const expressionOptionInitial = Object.freeze({
  type: "unit"
}); // 1.5 injection

const expressionOptionInjectionComponents = [{
  type: "component",
  key: ns.key,
  value: Object.freeze({
    type: "iri"
  })
}, {
  type: "component",
  key: ns.value,
  value: Object.freeze({
    type: "reference",
    value: 1
  })
}];
Object.freeze(expressionOptionInjectionComponents);

for (const component of expressionOptionInjectionComponents) {
  Object.freeze(component);
}

const expressionOptionInjection = Object.freeze({
  type: "product",
  components: expressionOptionInjectionComponents
}); // 1.6 match

const expressionOptionMatch = Object.freeze({
  type: "reference",
  value: 3
}); // 1.7 projection

const expressionOptionProjection = Object.freeze({
  type: "iri"
}); // 1.8 terminal

const expressionOptionTerminal = Object.freeze({
  type: "unit"
}); // 1.9 tuple

const expressionOptionTuple = Object.freeze({
  type: "reference",
  value: 6
});
const expressionOptions = [{
  type: "option",
  key: ns.constant,
  value: expressionOptionConstant
}, {
  type: "option",
  key: ns.dereference,
  value: expressionOptionDereference
}, {
  type: "option",
  key: ns.identifier,
  value: expressionOptionIdentifier
}, {
  type: "option",
  key: ns.identity,
  value: expressionOptionIdentity
}, {
  type: "option",
  key: ns.initial,
  value: expressionOptionInitial
}, {
  type: "option",
  key: ns.injection,
  value: expressionOptionInjection
}, {
  type: "option",
  key: ns.match,
  value: expressionOptionMatch
}, {
  type: "option",
  key: ns.projection,
  value: expressionOptionProjection
}, {
  type: "option",
  key: ns.terminal,
  value: expressionOptionTerminal
}, {
  type: "option",
  key: ns.tuple,
  value: expressionOptionTuple
}];
Object.freeze(expressionOptions);

for (const option of expressionOptions) {
  Object.freeze(option);
}

const expressionValue = Object.freeze({
  type: "coproduct",
  options: expressionOptions
});
const expressionLabel = Object.freeze({
  type: "label",
  key: ns.expression,
  value: expressionValue
}); // 2. map

const mapComponents = [{
  type: "component",
  key: ns.key,
  value: Object.freeze({
    type: "iri"
  })
}, {
  type: "component",
  key: ns.target,
  value: Object.freeze({
    type: "reference",
    value: 4
  })
}, {
  type: "component",
  key: ns.value,
  value: Object.freeze({
    type: "reference",
    value: 1
  })
}];
Object.freeze(mapComponents);

for (const component of mapComponents) {
  Object.freeze(component);
}

const mapValue = Object.freeze({
  type: "product",
  components: mapComponents
});
const mapLabel = Object.freeze({
  type: "label",
  key: ns.map,
  value: mapValue
}); // 3. match

const matchValue = Object.freeze({
  type: "unit"
});
const matchLabel = Object.freeze({
  type: "label",
  key: ns.match,
  value: matchValue
}); // 4. path

const pathTailOptions = [{
  type: "option",
  key: ns.none,
  value: Object.freeze({
    type: "unit"
  })
}, {
  type: "option",
  key: ns.some,
  value: Object.freeze({
    type: "reference",
    value: 4
  })
}];
const pathComponents = [{
  type: "component",
  key: ns.head,
  value: Object.freeze({
    type: "iri"
  })
}, {
  type: "component",
  key: ns.tail,
  value: Object.freeze({
    type: "coproduct",
    options: pathTailOptions
  })
}];
Object.freeze(pathComponents);

for (const component of pathComponents) {
  Object.freeze(component);
}

const pathValue = Object.freeze({
  type: "product",
  components: pathComponents
});
const pathLabel = Object.freeze({
  type: "label",
  key: ns.path,
  value: pathValue
}); // 5. slot

const slotComponentKeyValue = Object.freeze({
  type: "iri"
});
const slotComponentKey = Object.freeze({
  type: "component",
  key: ns.key,
  value: slotComponentKeyValue
});
const slotComponentSourceValue = Object.freeze({
  type: "reference",
  value: 6
});
const slotComponentSource = Object.freeze({
  type: "component",
  key: ns.source,
  value: slotComponentSourceValue
});
const slotComponentValueValue = Object.freeze({
  type: "reference",
  value: 1
});
const slotComponentValue = Object.freeze({
  type: "component",
  key: ns.value,
  value: slotComponentValueValue
});
const slotValueComponents = [slotComponentKey, slotComponentSource, slotComponentValue];
Object.freeze(slotValueComponents);
const slotValue = Object.freeze({
  type: "product",
  components: slotValueComponents
});
const slotLabel = Object.freeze({
  type: "label",
  key: ns.slot,
  value: slotValue
}); // 6. tuple

const tupleValue = Object.freeze({
  type: "unit"
});
const tupleLabel = Object.freeze({
  type: "label",
  key: ns.tuple,
  value: tupleValue
});
const mappingSchema = [caseLabel, expressionLabel, mapLabel, matchLabel, pathLabel, slotLabel, tupleLabel];
Object.freeze(mappingSchema);
var _default = mappingSchema;
exports.default = _default;