import APG from "../../apg.js"
import * as ns from "../../namespace.js"

// The objects constructed here are extremely sensitive.
// Do NOT edit this file unless you absolutely know what you are doing.

const valueOptionCoproductValue: APG.Reference = Object.freeze({
	type: "reference",
	value: 1,
})

const valueOptionCoproduct: APG.Option = Object.freeze({
	type: "option",
	key: ns.coproduct,
	value: valueOptionCoproductValue,
})

const valueOptionIriValue: APG.Reference = Object.freeze({
	type: "reference",
	value: 2,
})
const valueOptionIri: APG.Option = Object.freeze({
	type: "option",
	key: ns.iri,
	value: valueOptionIriValue,
})

const valueOptionLiteralValue: APG.Reference = Object.freeze({
	type: "reference",
	value: 4,
})
const valueOptionLiteral: APG.Option = Object.freeze({
	type: "option",
	key: ns.literal,
	value: valueOptionLiteralValue,
})

const valueOptionProductValue: APG.Reference = Object.freeze({
	type: "reference",
	value: 6,
})
const valueOptionProduct: APG.Option = Object.freeze({
	type: "option",
	key: ns.product,
	value: valueOptionProductValue,
})

const valueOptionReferenceValue: APG.Reference = Object.freeze({
	type: "reference",
	value: 7,
})
const valueOptionReference: APG.Option = Object.freeze({
	type: "option",
	key: ns.reference,
	value: valueOptionReferenceValue,
})

const valueOptionUnitValue: APG.Reference = Object.freeze({
	type: "reference",
	value: 8,
})
const valueOptionUnit: APG.Option = Object.freeze({
	type: "option",
	key: ns.unit,
	value: valueOptionUnitValue,
})

const anyValue: APG.Coproduct = Object.freeze({
	type: "coproduct",
	options: [
		valueOptionCoproduct,
		valueOptionIri,
		valueOptionLiteral,
		valueOptionProduct,
		valueOptionReference,
		valueOptionUnit,
	],
})

Object.freeze(anyValue.options)

// Component (index 0)
const componentComponentKeyValue: APG.Iri = Object.freeze({ type: "iri" })
const componentComponentKey: APG.Component = Object.freeze({
	type: "component",
	key: ns.key,
	value: componentComponentKeyValue,
})

const componentComponentSourceValue: APG.Reference = Object.freeze({
	type: "reference",
	value: 6,
})
const componentComponentSource: APG.Component = Object.freeze({
	type: "component",
	key: ns.source,
	value: componentComponentSourceValue,
})

const componentComponentValue: APG.Component = Object.freeze({
	type: "component",
	key: ns.value,
	value: anyValue,
})

const componentValue: APG.Product = Object.freeze({
	type: "product",
	components: [
		componentComponentKey,
		componentComponentSource,
		componentComponentValue,
	],
})

Object.freeze(componentValue.components)

const componentLabel: APG.Label = Object.freeze({
	type: "label",
	key: ns.component,
	value: componentValue,
})

// Coproduct (index 1)
const coproductValue: APG.Unit = Object.freeze({ type: "unit" })
const coproductLabel: APG.Label = Object.freeze({
	type: "label",
	key: ns.coproduct,
	value: coproductValue,
})

// Iri (index 2)
const iriValue: APG.Unit = Object.freeze({ type: "unit" })
const iriLabel: APG.Label = Object.freeze({
	type: "label",
	key: ns.iri,
	value: iriValue,
})

// Label (index 3)
const labelComponentKeyValue: APG.Iri = Object.freeze({ type: "iri" })
const labelComponentKey: APG.Component = Object.freeze({
	type: "component",
	key: ns.key,
	value: labelComponentKeyValue,
})

const labelComponentValue: APG.Component = Object.freeze({
	type: "component",
	key: ns.value,
	value: anyValue,
})

const labelValue: APG.Product = Object.freeze({
	type: "product",
	components: [labelComponentKey, labelComponentValue],
})

Object.freeze(labelValue.components)

const labelLabel: APG.Label = Object.freeze({
	type: "label",
	key: ns.label,
	value: labelValue,
})

// Literal (index 4)
const literalComponentDatatypeValue: APG.Iri = Object.freeze({ type: "iri" })
const literalComponentDatatype: APG.Component = Object.freeze({
	type: "component",
	key: ns.datatype,
	value: literalComponentDatatypeValue,
})

const literalValue: APG.Product = Object.freeze({
	type: "product",
	components: [literalComponentDatatype],
})

Object.freeze(literalValue.components)

const literalLabel: APG.Label = Object.freeze({
	type: "label",
	key: ns.literal,
	value: literalValue,
})

// Option (index 5)
const optionComponentKeyValue: APG.Iri = Object.freeze({ type: "iri" })
const optionComponentKey: APG.Component = Object.freeze({
	type: "component",
	key: ns.key,
	value: optionComponentKeyValue,
})

const optionComponentSourceValue: APG.Reference = Object.freeze({
	type: "reference",
	value: 1,
})
const optionComponentSource: APG.Component = Object.freeze({
	type: "component",
	key: ns.source,
	value: optionComponentSourceValue,
})

const optionComponentValue: APG.Component = Object.freeze({
	type: "component",
	key: ns.value,
	value: anyValue,
})

const optionValue: APG.Product = Object.freeze({
	type: "product",
	components: [optionComponentKey, optionComponentSource, optionComponentValue],
})

Object.freeze(optionValue.components)

const optionLabel: APG.Label = Object.freeze({
	type: "label",
	key: ns.option,
	value: optionValue,
})

// Product (index 6)
const productValue: APG.Unit = Object.freeze({ type: "unit" })
const productLabel: APG.Label = Object.freeze({
	type: "label",
	key: ns.product,
	value: productValue,
})

// Reference (index 7)
const referenceComponentValueValue: APG.Reference = Object.freeze({
	type: "reference",
	value: 3,
})
const referenceComponentValue: APG.Component = Object.freeze({
	type: "component",
	key: ns.value,
	value: referenceComponentValueValue,
})

const referenceValue: APG.Product = Object.freeze({
	type: "product",
	components: [referenceComponentValue],
})

Object.freeze(referenceValue.components)

const referenceLabel: APG.Label = Object.freeze({
	type: "label",
	key: ns.reference,
	value: referenceValue,
})

// Unit (index 8)
const unitValue: APG.Unit = Object.freeze({ type: "unit" })
const unitLabel: APG.Label = Object.freeze({
	type: "label",
	key: ns.unit,
	value: unitValue,
})

const schemaSchema: [
	typeof componentLabel,
	typeof coproductLabel,
	typeof iriLabel,
	typeof labelLabel,
	typeof literalLabel,
	typeof optionLabel,
	typeof productLabel,
	typeof referenceLabel,
	typeof unitLabel
] = [
	componentLabel,
	coproductLabel,
	iriLabel,
	labelLabel,
	literalLabel,
	optionLabel,
	productLabel,
	referenceLabel,
	unitLabel,
]

Object.freeze(schemaSchema)

export default schemaSchema
